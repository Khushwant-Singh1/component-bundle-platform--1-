// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String?   @db.VarChar(255) // Hashed password for email/password auth
  emailVerified     DateTime? @map("email_verified")
  image             String?   @map("avatar")
  role              UserRole  @default(CUSTOMER)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  lastLoginAt       DateTime? @map("last_login_at")
  isActive          Boolean   @default(true) @map("is_active")
  resetToken        String?   @unique @map("reset_token") @db.VarChar(255)
  resetTokenExpires DateTime? @map("reset_token_expires")

  // Relations
  sessions          Session[]
  accounts          Account[]
  orders            Order[]
  reviews           Review[]
  downloads         Download[]
  downloadTokens    DownloadToken[]

  @@map("users")
}

// User sessions for authentication
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token") @db.VarChar(255)
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Account model for OAuth providers
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String  @db.VarChar(255)
  provider           String  @db.VarChar(255)
  providerAccountId  String  @map("provider_account_id") @db.VarChar(255)
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String? @db.VarChar(50)
  scope              String? @db.Text
  id_token           String? @db.Text
  session_state      String? @db.VarChar(255)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Verification tokens for email verification and password reset
model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// OTP verification for user authentication (login/signup)
model OTPVerification {
  id        String      @id @default(cuid())
  email     String      @db.VarChar(255)
  otp       String      @db.VarChar(6)
  type      OTPType     @default(LOGIN)
  expiresAt DateTime
  isUsed    Boolean     @default(false)
  usedAt    DateTime?
  attempts  Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([email, otp, type])
  @@map("otp_verifications")
}

enum OTPType {
  LOGIN
  SIGNUP
  PASSWORD_RESET
}

enum UserRole {
  ADMIN
  CUSTOMER
}

// Bundle/Product management
model Bundle {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  shortDescription  String
  description       String
  price             Decimal  @db.Decimal(10, 2)
  originalPrice     Decimal? @db.Decimal(10, 2)
  setupTime         String
  difficulty        String
  estimatedValue    String?
  category          String
  demoUrl           String?
  githubUrl         String?
  downloadUrl       String?
  isActive          Boolean  @default(true)
  isFeatured        Boolean  @default(false)
  isBestseller      Boolean  @default(false)
  downloadCount     Int      @default(0)
  viewCount         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  images      BundleImage[]
  tags        BundleTag[]
  features    BundleFeature[]
  perfects    BundlePerfect[]
  benefits    BundleBenefit[]
  techStack   BundleTech[]
  includes    BundleInclude[]
  setup       BundleSetup[]
  orders      OrderItem[]
  reviews     Review[]
  downloads   Download[]
  downloadTokens DownloadToken[]

  @@map("bundles")
}

model BundleImage {
  id       String @id @default(cuid())
  bundleId String
  url      String
  alt      String?
  order    Int    @default(0)

  // Relations
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@map("bundle_images")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  color String @default("#6B7280")

  // Relations
  bundles BundleTag[]

  @@map("tags")
}

model BundleTag {
  bundleId String
  tagId    String

  // Relations
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([bundleId, tagId])
  @@map("bundle_tags")
}

model BundleFeature {
  id          String @id @default(cuid())
  bundleId    String
  description String
  order       Int    @default(0)

  // Relations
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@map("bundle_features")
}

model BundlePerfect {
  id        String @id @default(cuid())
  bundleId  String
  description String
  order     Int    @default(0)

  // Relations
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@map("bundle_perfects")
}
model BundleBenefit {
  id        String @id @default(cuid())
  bundleId  String
  description String
  order     Int    @default(0)

  // Relations
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@map("bundle_benefits")
}
model Technology {
  id       String @id @default(cuid())
  name     String @unique
  category String // "frontend", "backend", "database", "tool"
  color    String @default("#6B7280")

  // Relations
  bundles BundleTech[]

  @@map("technologies")
}

model BundleTech {
  bundleId String
  techId   String

  // Relations
  bundle Bundle     @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  tech   Technology @relation(fields: [techId], references: [id], onDelete: Cascade)

  @@id([bundleId, techId])
  @@map("bundle_tech")
}

model BundleInclude {
  id          String @id @default(cuid())
  bundleId    String
  description String
  order       Int    @default(0)

  // Relations
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@map("bundle_includes")
}

model BundleSetup {
  id          String @id @default(cuid())
  bundleId    String
  title       String
  description String
  order       Int    @default(0)

  // Relations
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@map("bundle_setup")
}

// Order management
model Order {
  id                String      @id @default(cuid())
  userId            String?     // Optional for guest orders
  customerName      String
  email             String
  emailVerified     Boolean     @default(false)
  emailOtp          String?
  emailOtpExpires   DateTime?
  status            OrderStatus @default(PENDING)
  totalAmount       Decimal     @db.Decimal(10, 2)
  currency          String      @default("INR")
  paymentMethod     String?
  paymentId         String?     @unique
  paymentScreenshot String?     // URL to uploaded payment screenshot
  adminNotes        String?     // Admin notes for approval/rejection
  approvedAt        DateTime?   // When admin approved the order
  approvedBy        String?     // Admin user ID who approved
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user  User?       @relation(fields: [userId], references: [id])
  items OrderItem[]
  downloadTokens DownloadToken[]

  @@map("orders")
}

enum OrderStatus {
  PENDING           // Initial state
  EMAIL_VERIFIED    // Email OTP verified
  PAYMENT_PENDING   // Waiting for payment screenshot
  PAYMENT_UPLOADED  // Payment screenshot uploaded, waiting for admin approval
  APPROVED          // Admin approved, bundle sent
  COMPLETED         // Order fully completed
  REJECTED          // Admin rejected the payment
  FAILED            // Technical failure
  REFUNDED          // Order refunded
}

model OrderItem {
  id       String  @id @default(cuid())
  orderId  String
  bundleId String
  price    Decimal @db.Decimal(10, 2)
  quantity Int     @default(1)

  // Relations
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  bundle Bundle @relation(fields: [bundleId], references: [id])

  @@map("order_items")
}

// Review system
model Review {
  id       String @id @default(cuid())
  userId   String
  bundleId String
  rating   Int    // 1-5 stars
  title    String?
  content  String
  isPublic Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  // Ensure one review per user per bundle
  @@unique([userId, bundleId])
  @@map("reviews")
}

// Download tracking
model Download {
  id         String   @id @default(cuid())
  userId     String
  bundleId   String
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  bundle Bundle @relation(fields: [bundleId], references: [id])

  @@map("downloads")
}

// Secure download tokens (expire within 24 hours)
model DownloadToken {
  id          String   @id @default(cuid())
  token       String   @unique @db.VarChar(255) // JWT or secure random token
  userId      String
  bundleId    String
  orderId     String   // Link to the order that grants access
  expiresAt   DateTime // Token expiration (24 hours from creation)
  isUsed      Boolean  @default(false) // Track if token has been used
  usedAt      DateTime? // When the token was used
  ipAddress   String?  // IP that requested the token
  userAgent   String?  // User agent that requested the token
  createdAt   DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  bundle Bundle @relation(fields: [bundleId], references: [id])
  order  Order  @relation(fields: [orderId], references: [id])

  @@map("download_tokens")
}

// Analytics
model PageView {
  id        String   @id @default(cuid())
  page      String   // "/", "/bundles", "/bundles/[id]"
  bundleId  String?  // For bundle detail pages
  ipAddress String?
  userAgent String?
  referer   String?
  createdAt DateTime @default(now())

  @@map("page_views")
}

// Newsletter subscription
model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter")
}

// Contact form submissions
model ContactSubmission {
  id        String            @id @default(cuid())
  firstName String
  lastName  String
  email     String
  company   String?
  subject   ContactSubject
  message   String
  status    SubmissionStatus  @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("contact_submissions")
}

enum ContactSubject {
  TECHNICAL
  BILLING
  PRESALES
  PARTNERSHIP
  FEEDBACK
  OTHER
}

enum SubmissionStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// FAQ management
model FAQ {
  id       String  @id @default(cuid())
  question String
  answer   String
  category String?
  order    Int     @default(0)
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

// Coupon/Discount system
model Coupon {
  id            String      @id @default(cuid())
  code          String      @unique
  description   String?
  discountType  DiscountType
  discountValue Decimal     @db.Decimal(10, 2)
  minAmount     Decimal?    @db.Decimal(10, 2)
  maxUses       Int?
  usedCount     Int         @default(0)
  isActive      Boolean     @default(true)
  validFrom     DateTime
  validUntil    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("coupons")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Email templates
model EmailTemplate {
  id       String @id @default(cuid())
  name     String @unique
  subject  String
  htmlBody String
  textBody String?
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_templates")
}

// System settings
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // "string", "number", "boolean", "json"
  updatedAt DateTime @updatedAt

  @@map("settings")
}
